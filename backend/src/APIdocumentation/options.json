{
  "openapi": "3.0.0",
  "info": {
    "title": "ToDoList API",
    "description": "API for managing the list of tasks (ToDo).",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local server for development and testing."
    }
  ],
  "paths": {
    "/todos": {
      "post": {
        "summary": "Create a new task",
        "description": "Allows adding a new task to the list.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Title of the task."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the task."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToDo"
                }
              }
            }
          },
          "400": {
            "description": "Internal server error. Failed to create todo."
          }
        }
      },
      "get": {
        "summary": "Get the list of tasks",
        "description": "Returns the complete list of tasks.",
        "responses": {
          "200": {
            "description": "List of tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ToDo"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. Failed to retrieve todos."
          }
        }
      }
    },
    "/todos/{id}": {
      "get": {
        "summary": "Get a task by ID",
        "description": "Returns the details of a task specified by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Unique ID of the task."
          }
        ],
        "responses": {
          "200": {
            "description": "Task details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToDo"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. Failed to retrieve todo."
          }
        }
      },
      "patch": {
        "summary": "Update a task by ID",
        "description": "Returns the details of a task specified by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Unique ID of the task."
          }
        ],
        "responses": {
          "200": {
            "description": "Details for the new task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToDo"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. Failed to update todo."
          }
        }
      }
    },
    "/login": {
      "post": {
        "summary": "LogIn API",
        "description": "Authenticates a user and generates a JWT token.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address."
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "User's password."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "JWT token for authentication."
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Incorrect credentials."
          },
          "500": {
            "description": "Internal server error during login."
          }
        }
      }
    },
    "/register": {
      "post": {
        "summary": "Register a new user",
        "description": "Allows registering a new user with a username, email, and password.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_name": {
                    "type": "string",
                    "description": "User's username."
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address."
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "User's password."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error during registration."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ToDo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique ID of the task."
          },
          "title": {
            "type": "string",
            "description": "Title of the task."
          },
          "description": {
            "type": "string",
            "description": "Description of the task."
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique ID of the user."
          },
          "user_name": {
            "type": "string",
            "description": "User's name."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address."
          },
          "logged_in": {
            "type": "boolean",
            "description": "Indicates whether the user is logged in."
          }
        }
      }
    }
  }
}